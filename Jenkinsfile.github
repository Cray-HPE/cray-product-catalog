@Library('cms-meta-tools') _
@Library('csm-shared-library') __

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-product-catalog"
        PYMOD_NAME = "cray-product-catalog"
        DESCRIPTION = "Update a product catalog with product/version artifacts."
        APP_NAME = "cray-product-catalog-update"
        IS_STABLE = getBuildIsStable()
        // Set PATH so that commands installed with pip --user are accessible
        PATH = "${env.HOME}/.local/bin:${env.PATH}"
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                setVersionFiles()
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }
        
        stage("Build") {            
            parallel {

                stage('Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                    }

                    steps {
                        updateCsmHelmChartAppVersion(chartPath: "${WORKSPACE}/kubernetes/${NAME}", appVersion: env.DOCKER_VERSION)
                        sh "make chart"
                    }
                }

                stage('Python Package'){
                    steps {
                        sh "make pymod_prepare"
                        sh "make pymod_build"
                        sh "make pymod_test"
                    }
                }

            }
        }

        stage("Publish") {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)
                publishCsmPythonModules(module: env.PYMOD_NAME, isStable: env.IS_STABLE)
            }
        }
    }
}
