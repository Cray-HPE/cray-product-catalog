@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-product-catalog"
        APP_NAME = "cray-product-catalog-update"
        DESCRIPTION = "Update a product catalog with product/version artifacts."
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Set Versions") {
            steps {
                script {
                    // Get version from .version
                    def ver = sh(returnStdout: true, script: "head -1 .version").trim()
                    echo "Base version is ${ver}"
                
                    // Generate docker version string
                    def dockerver = getDockerBuildVersion(isStable: env.IS_STABLE)
                    echo "Docker version is ${dockerver}"
                
                    // Write docker version string to .docker_version
                    writeFile(file: ".docker_version", text: dockerver)
                
                    // Generate chart version string
                    def chartver = dockerver.replaceAll("_", "+")
                    echo "Chart version is ${chartver}"
                
                    // Write chart version to .chart_version
                    writeFile(file: ".chart_version", text: chartver)
                }
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }
        
        stage("Build") {            
            parallel {
                stage('Image') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
                    }

                    steps {
                        echo "Docker args are ${env.DOCKER_ARGS}"
                        sh "make image"
                    }
                }

                stage('Chart') {
                    environment {
                        DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                        CHART_VERSION = sh(returnStdout: true, script: "head -1 .chart_version").trim()
                    }

                    steps {
                        sh "make chart"
                    }
                }
            }
        }

        stage("Publish") {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                publishCsmDockerImage(image: env.APP_NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
                publishCsmHelmCharts(component: env.NAME, chartsPath: "${WORKSPACE}/kubernetes/.packaged", isStable: env.IS_STABLE)

            }
        }
    }
}