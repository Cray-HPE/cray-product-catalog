# See https://github.com/thomaseizinger/github-action-gitflow-release-workflow
# This should only be dispatched from the 'develop' or a 'hotfix' branch.
name: "Draft New Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The (SemVer) version to release:'
        required: true

permissions:
#   actions: write
  pull-requests: write
#   contents: read
#   repository-projects: write

jobs:
  draft-new-release:
    name: "Draft a new release"
    runs-on: ubuntu-latest
    env:
      GITHUB_AUTH_APP_ID: 129003
    steps:
      - uses: actions/checkout@v2

      - name: Create release branch
        run: git checkout -b release/${{ github.event.inputs.version }}

      - name: Update changelog
        uses: thomaseizinger/keep-a-changelog-new-release@1.3.0
        with:
          tag: ${{ github.event.inputs.version }}

      # # In order to make a commit, we need to initialize a user.
      # # You may choose to write something less generic here if you want, it doesn't matter functionality wise.
      # - name: Initialize mandatory git config
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email noreply@github.com

      # This step will differ depending on your project setup
      # Fortunately, yarn has a built-in command for doing this!
      # Not needed for repos that use gitversion
      # - name: Bump version in package.json
      #   run: yarn version --new-version ${{ github.event.inputs.version }} --no-git-tag-version

      # - name: Commit changelog and manifest files
      #   id: make-commit
      #   run: |
      #     git add CHANGELOG.md
      #     git commit --message "[bot] Prepare release ${{ github.event.inputs.version }}"
      #     echo "::set-output name=commit::$(git rev-parse HEAD)"

      - name: Push new branch
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "[bot] Prepare release ${{ github.event.inputs.version }}"
          commit_user_name: "github-actions[bot]"
          branch: release/${{ github.event.inputs.version }}

      # - name: Push new branch
      #   run: git push origin release/${{ github.event.inputs.version }}

      - name: Get auth token
        uses: navikt/github-app-token-generator@v1
        id: get-token
        with:
          private-key: ${{ secrets.ALGOL60_GITHUB_READONLY_APP }}
          app-id: ${{env.GITHUB_AUTH_APP_ID}}

      - name: Create Pull Request (release/${{ github.event.inputs.version }} -> master)
        id: cpr
        uses: thomaseizinger/create-pull-request@1.2.2
        env:
          #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ steps.get-token.outputs.token }}
        with:
          head: release/${{ github.event.inputs.version }}
          base: master
          title: '[autogenerated] Create release version ${{ github.event.inputs.version  }}'
          reviewers: ${{ github.actor }}
          labels: 'github-actions, gitflow-maintenance'
          body: |
            Hi @${{ github.actor }}!

            This PR was created in response to a manual trigger of the release workflow here: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}.
            The bots committed changes the changelog and bumped versions (if applicable) in this commit: ${{ steps.make-commit.outputs.commit }}.

            Merging this PR will automatically create a GitHub release and create a PR with an updated CSM manifest (if applicable).
            See .github/workflows/publish-new-release.yml.

      - name: Check outputs
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.html_url }}"
